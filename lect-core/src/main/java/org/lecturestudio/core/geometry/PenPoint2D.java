/*
 * Copyright (C) 2020 TU Darmstadt, Department of Computer Science,
 * Embedded Systems and Applications Group.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.lecturestudio.core.geometry;

/**
 * A geometric point that represents the x, y coordinates with pressure sensitivity generated by stylus pens.
 *
 * @author Alex Andres
 */
public class PenPoint2D extends Point2D {

	private static final long serialVersionUID = 4778991581931346982L;

	/** The pressure applied by a pen. */
	private double pressure = 1.0;


	/**
	 * Create a new instance of {@link PenPoint2D} with origin coordinates and maximum pressure of 1.
	 */
	public PenPoint2D() {
		super();
	}

	/**
	 * Copy constructor of {@link PenPoint2D} that copies the values of the specified point.
	 *
	 * @param point The {@link PenPoint2D} to copy.
	 */
	public PenPoint2D(PenPoint2D point) {
		super(point);

		setPressure(point.getPressure());
	}

	/**
	 * Creates a new instance of {@link PenPoint2D} with specified coordinates.
	 *
	 * @param x The x coordinate of the point.
	 * @param y The y coordinate of the point.
	 */
	public PenPoint2D(double x, double y) {
		this(x, y, 1);
	}

	/**
	 * Creates a new instance of {@link PenPoint2D} with specified coordinates and pressure.
	 * The pressure must be in the range of [0,1].
	 *
	 * @param x        The x coordinate of the point.
	 * @param y        The y coordinate of the point.
	 * @param pressure The pressure at the coordinates.
	 */
	public PenPoint2D(double x, double y, double pressure) {
		super(x, y);

		this.pressure = pressure;
	}

	/**
	 * Set the pressure applied at this point. The value must be in the range of [0,1].
	 *
	 * @param pressure The pressure at this point.
	 */
	public void setPressure(double pressure) {
		this.pressure = pressure;
	}

	/**
	 * Get the pressure at this point.
	 *
	 * @return The pressure at this point.
	 */
	public double getPressure() {
		return pressure;
	}

	@Override
	public PenPoint2D clone() {
		return new PenPoint2D(getX(), getY(), getPressure());
	}

	@Override
	public String toString() {
		return getClass().getName() + " (" + getX() + ", " + getY() + ", " + getPressure() + ")";
	}

}
